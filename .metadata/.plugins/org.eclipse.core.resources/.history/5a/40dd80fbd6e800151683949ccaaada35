package chapter5;

public class AList<T> implements ListInterface<T>, java.io.Serializable 
{
	private T[] list; // array of list entries
	private int length; // current number of entries in list
	
	private static final int MAX_SIZE = 50;
	public AList()
	{
		this(MAX_SIZE);
	} // end of default
	
	public AList(int maxSize)
	{
		length = 0;
		list = (T[]) new Object[maxSize];
	} // end of constructor

	@Override
	public boolean add(T newEntry) 
	{
		boolean isSuccessful = true;
		
		if (!isFull())
		{
			// assertion: lenght of list < lenght of array
			assert length < list.length;
			// position of new entry will be after last entry in list
			list[length] = newEntry;
			length++;
		}
		else
			isSuccessful = false;
		
		return isSuccessful;
	}

	@Override
	public boolean add(int newPosition, T newEntry) 
	{
		boolean isSuccessful = true;
		
		if(!isFull() && (newPosition >= 1) && (newPosition <= length + 1))
		{
			makeRoom(newPosition);
			list[newPosition - 1] = newEntry;
			length++;
		}
		else
			isSuccessful = false;
		
		return isSuccessful;
	} // end of add

	@Override
	public T remove(int givenPosition) 
	{
		T result = null; // return value
		
		if ((givenPosition >= 1) && (givenPosition <= length))
		{
			assert !isEmpty();
			result = list[givenPosition - 1]; // get entry to be removed
			
			// move subsequent entries toward entry to be removed, 
			// unless it is last in list
			if (givenPosition < length)
				removeGap(givenPosition);
			
			length--;
		} // end if statement
		return result;
	} // end of remove

	@Override
	public void clear() 
	{
		length = 0;
	} // end of clear

	@Override
	public boolean replace(int givenPosition, T newEntry) 
	{
		boolean isSuccessful = true;
		
		if ((givenPosition >= 1) && (givenPosition <= length))
		{
			assert !isEmpty();
			list[givenPosition - 1] = newEntry;
		}
		else
			isSuccessful = false;
		
		return isSuccessful;
	} // end of replace

	@Override
	public T getEntry(int givenPosition) 
	{
		T result = null;
		
		if ((givenPosition >= 1) && (givenPosition <= length))
		{
			assert !isEmpty();
			result = list[givenPosition -1];
		} // end of if
		return result;
	} // end of getEntry
	
	@Override
	public boolean contains(T anEntry)
	{
		boolean found = false;
		
		for (int index = 0; !found && (index < length); index++)
		{
			if (anEntry.equals(list[index]))
				found = true;
		} // end of if 
		return found;
	} // end of contains

	@Override
	public int getLength() 
	{
		return length;
	} // end of getLength

	@Override
	public boolean isEmpty() 
	{
		return length == 0; // 
	} // end of isEmpty

	@Override
	public boolean isFull()
	{
		return length == list.length;
	} // end of isFull

	@Override
	public void display() 
	{
		for (int index = 0; index < length; index++)
			System.out.println(list[index]);
	} // end of display
	
	private void makeRoom(int newPosition)
	{
		assert (newPosition >= 1) && (newPosition <= length + 1);
		
		int newIndex = newPosition - 1;
		int lastIndex = length - 1;
		
		// move each entry to next higher index
		for (int index = lastIndex; index >= newIndex; index--)
			list[index + 1] = list[index];
	} // end makeRoom
	
	private void removeGap(int givenPosition)
	{
		assert (givenPosition >= 1) && (givenPosition < length);
		
		int removedIndex = givenPosition - 1;
		int lastIndex = length - 1;
		for (int index = removedIndex; index < lastIndex; index++)
			list[index] = list[index - 1];
	} // end of removeGap
	
	public static void arrayCopy(Object fromArray, int fromIndex, Object toArray, int toIndex, int count)
	{
		
	} // end of arrayCopy
} // end of AList
